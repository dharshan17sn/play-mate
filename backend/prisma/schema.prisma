generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TeamMemberStatus {
  PENDING
  ACCEPTED
  REJECTED
}


enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

//
// MODELS
//
model User {
  user_id      String  @id @unique
  displayName  String
  email        String  @unique
  photo        String?
  gender       String?
  passwordHash String
  location     String?
  preferredDays DayOfWeek[] @default([])
  timeRange    String[] @default([]) // Array of time ranges in format "HH:MM-HH:MM" e.g., ["18:00-22:00", "06:00-10:00"]

  // relations
  teams               TeamMember[]
  joinRequestsSent     Invitation[]     @relation("JoinRequestsSent")
  joinRequestsReceived Invitation[]     @relation("JoinRequestsReceived")
  tournaments         TournamentTeam[] @relation("UserTournamentTeams")
  preferredGames      UserGame[]
  messages            Message[]
  teamMessages        TeamMessage[]     @relation("TeamMessagesSent")
  friendRequestsSent   FriendRequest[]  @relation("FriendRequestFrom")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestTo")
  friendsAsA           Friend[]         @relation("FriendUserA")
  friendsAsB           Friend[]         @relation("FriendUserB")
  chatsAsA             Chat[]           @relation("ChatUserA")
  chatsAsB             Chat[]           @relation("ChatUserB")
  chatMessages         ChatMessage[]    @relation("ChatMessageSender")


  // teams/tournaments created by user
  createdTeams       Team[]       @relation("TeamCreator")
  createdTournaments Tournament[] @relation("TournamentCreator")
  notifications Notification[] 
}

model Game {
  name        String       @id
  teams       Team[]
  users       UserGame[]
  tournaments Tournament[]
}

model Team {
  id              String   @id @default(uuid())
  title           String
  photo           String?
  description     String?
  gameName        String
  noOfPlayers     Int?     // Optional maximum number of players
  isPublic        Boolean  @default(true) // true for public, false for private
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  creatorId String
  creator   User   @relation("TeamCreator", fields: [creatorId], references: [user_id])

  game     Game   @relation(fields: [gameName], references: [name])

  members     TeamMember[]
  tournaments TournamentTeam[]
  joinRequests Invitation[]
  messages    Message[]
  teamMessages TeamMessage[]
}

model TeamMember {
  id       String           @id @default(uuid())
  userId   String
  teamId   String
  status   TeamMemberStatus @default(PENDING)
  isAdmin  Boolean          @default(false)
  joinedAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [user_id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId]) // Prevent duplicate membership
}

model Tournament {
  id          String  @id @default(uuid())
  title       String
  description String?

  creatorId String
  creator   User   @relation("TournamentCreator", fields: [creatorId], references: [user_id])

  gameId String
  game   Game   @relation(fields: [gameId], references: [name])

  photo     String?
  startDate DateTime
  location  String
  noOfPlayersPerTeam Int? // Optional maximum number of players per team

  teams    TournamentTeam[]
  messages Message[]
}

model TournamentTeam {
  id           String   @id @default(uuid())
  tournamentId String
  teamId       String
  registeredAt DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  team       Team       @relation(fields: [teamId], references: [id])
  users      User[]     @relation("UserTournamentTeams")

  @@unique([tournamentId, teamId]) // Prevent duplicate registration
}

model Invitation {
  id         String           @id @default(uuid())
  fromUserId String
  toUserId   String
  teamId     String
  status     InvitationStatus @default(PENDING)
  sentAt     DateTime         @default(now())

  fromUser User @relation("JoinRequestsSent", fields: [fromUserId], references: [user_id])
  toUser   User @relation("JoinRequestsReceived", fields: [toUserId], references: [user_id])
  team     Team @relation(fields: [teamId], references: [id])
}

model TeamMessage {
  id        String   @id @default(uuid())
  teamId    String
  senderId  String
  content   String
  sentAt    DateTime @default(now())
  readAt    DateTime?

  team   Team @relation(fields: [teamId], references: [id])
  sender User @relation("TeamMessagesSent", fields: [senderId], references: [user_id])

  @@index([teamId, sentAt])
}



model UserGame {
  id     String @id @default(uuid())
  userId String
  gameName String

  user User @relation(fields: [userId], references: [user_id])
  game Game @relation(fields: [gameName], references: [name])

  @@unique([userId, gameName]) // Prevent duplicate preferences
}

model Message {
  id           String   @id @default(uuid())
  senderId     String
  teamId       String?
  tournamentId String?
  content      String
  sentAt       DateTime @default(now())

  sender     User        @relation(fields: [senderId], references: [user_id])
  team       Team?       @relation(fields: [teamId], references: [id])
  tournament Tournament? @relation(fields: [tournamentId], references: [id])
}

//
// Friends system
//

model FriendRequest {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  status     InvitationStatus @default(PENDING)
  createdAt  DateTime @default(now())

  fromUser User @relation("FriendRequestFrom", fields: [fromUserId], references: [user_id])
  toUser   User @relation("FriendRequestTo", fields: [toUserId], references: [user_id])

  @@index([toUserId, status, createdAt])
  @@index([fromUserId, createdAt])
}

model Friend {
  id       String   @id @default(uuid())
  userAId  String
  userBId  String
  createdAt DateTime @default(now())

  userA User @relation("FriendUserA", fields: [userAId], references: [user_id])
  userB User @relation("FriendUserB", fields: [userBId], references: [user_id])

  @@unique([userAId, userBId])
}

//
// Chat system
//

model Chat {
  id        String   @id @default(uuid())
  userAId   String
  userBId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userA User @relation("ChatUserA", fields: [userAId], references: [user_id])
  userB User @relation("ChatUserB", fields: [userBId], references: [user_id])
  messages ChatMessage[]

  @@unique([userAId, userBId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  sentAt    DateTime @default(now())
  readAt    DateTime?

  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User @relation("ChatMessageSender", fields: [senderId], references: [user_id])

  @@index([chatId, sentAt])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String?
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [user_id])

  @@index([userId, read, createdAt])
}